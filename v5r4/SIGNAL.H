#ifndef   __signal_h
  #define __signal_h

#ifdef __cplusplus
 extern "C" {
 #pragma info(none)
#else
 #pragma nomargins nosequence
 #pragma checkout(suspend)
#endif

/* ================================================================= */
/* Header File Name: signal.h                                        */
/*                                                                   */
/* This header contains the declarations used by the signal and      */
/* raise functions.                                                  */
/*                                                                   */
/* Licensed Materials-Property of IBM                                */
/*                                                                   */
/* 5716-CX2, 5716-CX4, 5716-CX5, 5722-SS1                            */
/* (C) Copyright IBM Corp. 1991,2003                                 */
/*                                                                   */
/* US Government Users Restricted Rights -                           */
/* Use, duplication or disclosure restricted                         */
/* by GSA ADP Schedule Contract with IBM Corp.                       */
/* ================================================================= */

  #ifndef __except_h
    #include <except.h>
  #endif

  #ifndef  __types_h
     #include <sys/types.h>
  #endif

  #ifndef  __time_h
    #include <time.h>
  #endif

  #ifndef  __milib_h
    #include <milib.h>
  #endif

  #ifndef __QBFC_EXTERN
    #ifdef __ILEC400__
      #define QBFC_EXTERN extern
    #else
      #define QBFC_EXTERN extern "C"
    #endif
    #define __QBFC_EXTERN  1
  #endif

  #pragma datamodel(P128)

/*
 *  Macros
 */

#define SIGMIN       1
#define SIGMAX      63
#define NSIG        (SIGMAX+1)


/*--------------------------------------------------------------------*/
/*                       ANSI-C Required Signals                      */
/*--------------------------------------------------------------------*/

#define SIGABRT     1        /* Abnormal termination */
#define SIGFPE      2        /* Erroneous arithmetic operation */
#define SIGILL      3        /* Invalid hardware instruction */
#define SIGINT      4        /* Interactive attention signal */
#define SIGSEGV     5        /* Invalid memory reference */
#define SIGTERM     6        /* Termination signal */


/*--------------------------------------------------------------------*/
/*                          Extended Signals                          */
/*--------------------------------------------------------------------*/

#define SIGUSR1     7        /* Application defined signal 1 */
#define SIGUSR2     8        /* Application defined signal 2 */
#define SIGIO       9        /* I/O possible, or completed */

#if defined (__EXTENDED__)

  #define SIGALL    10       /* SAA defined signal */
  #define SIGOTHER  11       /* SAA defined signal */

#endif /* #if defined (__EXTENDED__) */

#define SIGPCANCEL  25       /* Thread termination signal (can not    */
                             /* be caught or ignored)                 */
#define SIGPALRM    26       /* Psuedo-alarm signal (can not be       */
                             /* caught or ignored)                    */


/*--------------------------------------------------------------------*/
/*                  Additional POSIX Required Signals                 */
/*--------------------------------------------------------------------*/

#define SIGALRM    14        /* Timeout signal */
#define SIGKILL    12        /* Termination signal (cannot be caught,ignored)*/
#define SIGPIPE    13        /* Write on a pipe with no readers */
#define SIGQUIT    16        /* Interactive termination signal */


/*--------------------------------------------------------------------*/
/*                        Job Control Signals                         */
/*--------------------------------------------------------------------*/

#define SIGCHLD    20        /* Child process terminated or stopped */
#define SIGCONT    19        /* Continue if stopped */
#define SIGHUP     15        /* Hangup detected on controlling terminal */
#define SIGSTOP    17        /* Stop signal (cannot be caught or ignored) */

/*--------------------------------------------------------------------*/
/*  NOTE:  These signals are provided as an aid to application        */
/*         porting.  These signals are not generated by OS/400.       */
/*--------------------------------------------------------------------*/

#define SIGTSTP    18        /* Interactive stop signal */
#define SIGTTIN    21        /* Background read from controlling terminal */
#define SIGTTOU    22        /* Background write to controlling terminal */


/*--------------------------------------------------------------------*/
/*                   Additional X/Open 1170 Signals                   */
/*--------------------------------------------------------------------*/

#define SIGURG     23        /* High bandwidth data is available at a socket */
#define SIGPOLL    24        /* Pollable event */
#define SIGXFSZ    40        /* File size limit exceeded*/

/*--------------------------------------------------------------------*/
/*  NOTE:  These signals are provided as an aid to application        */
/*         porting.  These signals are not generated by OS/400.       */
/*--------------------------------------------------------------------*/

#if (__OS400_TGTVRM__>=520)
#define SIGWINCH   27        /* Window size change */
#endif
#define SIGBUS     32        /* Bus error (specification exception) */
#define SIGDANGER  33        /* system crash imminent */
#define SIGPRE     34        /* programming exception */
#define SIGSYS     35        /* Bad system call */
#define SIGTRAP    36        /* Trace/Breakpoint trap */
#define SIGPROF    37        /* Profiling timer expired */
#define SIGVTALRM  38        /* Virtual timer expired */
#define SIGXCPU    39        /* CPU time limit exceeded */


/*--------------------------------------------------------------------*/
/*              Signal names supplied for compatibility               */
/*--------------------------------------------------------------------*/

#define SIGIOINT   SIGURG    /* printer to backend error signal */
#define SIGAIO     SIGIO     /* base lan i/o */
#define SIGPTY     SIGIO     /* pty i/o */
#define SIGIOT     SIGABRT   /* abort (terminate) process */
#define SIGCLD     SIGCHLD   /* old death of child signal */
#define SIGLOST    SIGABRT   /* old BSD signal */

/*--------------------------------------------------------------------*/
/*                  Data types for Signal functions                   */
/*--------------------------------------------------------------------*/

typedef struct sigbitmask_t{
    int rsrv0      : 1;
    int sigabrt    : 1;      /*  1 Abnormal termination */
    int sigfpe     : 1;      /*  2 Erroneous arithmetic operation */
    int sigill     : 1;      /*  3 Invalid hardware instruction */
    int sigint     : 1;      /*  4 Interactive attention signal */
    int sigsegv    : 1;      /*  5 Invalid memory reference */
    int sigterm    : 1;      /*  6 Termination signal */
    int sigusr1    : 1;      /*  7 Application defined signal 1 */
    int sigusr2    : 1;      /*  8 Application defined signal 2 */
    int sigio      : 1;      /*  9 I/O possible, or completed */
    int sigall     : 1;      /* 10 ILE all signal */
    int sigother   : 1;      /* 11 ILE other signal */
    int sigkill    : 1;      /* 12 Termination signal */
    int sigpipe    : 1;      /* 13 Write on a pipe with no readers */
    int sigalrm    : 1;      /* 14 Timeout signal */
    int sighup     : 1;      /* 15 Hangup detected on controlling terminal */
    int sigquit    : 1;      /* 16 Interactive termination signal */
    int sigstop    : 1;      /* 17 Stop signal */
    int sigtstp    : 1;      /* 18 Interactive stop signal */
    int sigcont    : 1;      /* 19 Continue if stopped */
    int sigchld    : 1;      /* 20 Child process terminated or stopped */
    int sigttin    : 1;      /* 21 Background read from controlling terminal */
    int sigttou    : 1;      /* 22 Background write to controlling terminal */
    int sigurg     : 1;      /* 23 High bandwidth data is available at socket*/
    int sigpoll    : 1;      /* 24 Pollable event */
    int sigpcancel : 1;      /* 25 Thread termination signal */
    int sigpalrm   : 1;      /* 26 Psuedo-alarm signal */
    #if (__OS400_TGTVRM__>=520)
    int sigwinch   : 1;      /* 27 Window size change signal */
    #else
    int rsrv27     : 1;      /* 27 Signal number not supported */
    #endif
    int rsrv28     : 1;      /* 28 Signal number not supported */
    int rsrv29     : 1;      /* 29 Signal number not supported */
    int rsrv30     : 1;      /* 30 Signal number not supported */
    int rsrv31     : 1;      /* 31 Signal number not supported */
    int sigbus     : 1;      /* 32 Bus error (specification exception) */
    int sigdanger  : 1;      /* 33 system crash imminent */
    int sigpre     : 1;      /* 34 programming exception */
    int sigsys     : 1;      /* 35 Bad system call */
    int sigtrap    : 1;      /* 36 Trace/Breakpoint trap */
    int sigprof    : 1;      /* 37 Profiling timer expired */
    int sigvtalrm  : 1;      /* 38 Virtual timer expired */
    int sigxcpu    : 1;      /* 39 CPU time limit exceeded */
    int sigxfsz    : 1;      /* 40 File size limit exceeded */
    int rsrv       : 23;     /*  Signal numbers (41-63) not supported */
} sigbitmask_t;

typedef struct sigmask_t{
   unsigned long lomask;
   unsigned long himask;
} sigmask_t;


typedef union sigset_t
{
    sigmask_t sig_mask;
    sigbitmask_t sig_bitmask;
} sigset_t;


/*--------------------------------------------------------------------*/
/*              siginfo_t structure used by sigaction()               */
/*--------------------------------------------------------------------*/

typedef struct sigdata_t {
    int      si_code;               /* Cause of signal               */
    int      si_errno;              /* Error number                  */
    pid_t    si_pid;                /* Process ID of sender          */
    uid_t    si_uid;                /* Real user ID of sender        */
    char     si_data[1];            /* Additional signal related     \
                                       data (if available)           */
} sigdata_t;

typedef struct siginfo_t {
    int      si_signo;              /* Signal number                 */
    int      si_source   :   1;     /* Signal source                 */
    int      reserved1   :  15;     /* Reserved (binary 0)           */
    short    si_data_size;          /* Size of signal related data   \
                                       (if available)                */
    _MI_Time si_time;               /* Time of signal                */
    struct {
        char reserved2[2];          /* Pad (reserved)                */
        char si_job[10];            /* Simple job name               */
        char si_user[10];           /* User name                     */
        char si_jobno[6];           /* Job number                    */
        char reserved3[4];          /* Pad (reserved)                */
    } si_QJN;                       /* Qualified job name            */
    sigdata_t si_sigdata;           /* Signal related data           */
} siginfo_t;

/*
 *  Signal sources (si_source values)
 */

#define SI_MACHINE 0                /* Signal was generated by the    \
                                       machine (si_QJN, si_pid and    \
                                       si_uid are not set)           */
#define SI_PROCESS 1                /* Signal was generated by a      \
                                       process (si_QJN, si_pid and    \
                                       si_uid are set)               */

/*
 *  Signal specific reasons for generation of the signal (si_code values)
 */

#define SI_NOSICODE 0               /* No signal specific reason is   \
                                       available (si_data_size is     \
                                       set to binary zero)           */
#define SI_ENDJOBCTLD 1             /* The signal was sent because    \
                                       the job was ended with the     \
                                       controlled option. No signal   \
                                       related data is available      \
                                       (si_data_size is set to binary \
                                        zero).                       */
#define SI_DATA_MAX_SIZE 1024       /* The maximum size of the        \
                                       additional signal related data \
                                       (si_data) field in the         \
                                       sigdata_t structure.          */

/*--------------------------------------------------------------------*/
/*              sigaction structure used by sigaction()               */
/*--------------------------------------------------------------------*/

struct sigaction {
    void (*sa_handler)(int);      /* Signal handler, or action value   \
                                     (ignored if SA_SIGINFO is defined \
                                     in sa_flags)                      */
    sigset_t      sa_mask;        /* Signals to block while in handler */
    int           sa_flags;       /* Signal action flags */
    void (*sa_sigaction)(int, siginfo_t *,void *); /* Pointer to signal \
                                     handler (only used when SA_SIGINFO \
                                     is defined in sa_flags)           */
};

/*
 *  Signal action flags (si_flags values)
 */

#define SA_NOCLDSTOP 0x00000001   /* Do not send SIGCHLD for child stops */
#define SA_NODEFER   0x00000002   /* Do not block signal when sig is caught */
#define SA_RESETHAND 0x00000004   /* Reset to SIG_DFL on signal handler entry*/
#define SA_SIGINFO   0x00000008   /* siginfo structure passed to C function */


/*--------------------------------------------------------------------*/
/*              constants for sigprocmask() how argument              */
/*--------------------------------------------------------------------*/

#define SIG_BLOCK      0          /* Add signals to current blocked set */
#define SIG_UNBLOCK    1          /* Remove signals from current blocked set */
#define SIG_SETMASK    2          /* Replace current blocked signal set */


/*--------------------------------------------------------------------*/
/*              Function prototypes for Signal functions              */
/*--------------------------------------------------------------------*/

QBFC_EXTERN int kill( pid_t, int );
QBFC_EXTERN int sigaction( int, const struct sigaction *, struct sigaction * );
QBFC_EXTERN int sigaddset( sigset_t *, int );
QBFC_EXTERN int sigdelset( sigset_t *, int );
QBFC_EXTERN int sigemptyset( sigset_t * );
QBFC_EXTERN int sigfillset( sigset_t * );
QBFC_EXTERN int sigismember( const sigset_t *, int );
QBFC_EXTERN int sigpending( sigset_t * );
QBFC_EXTERN int sigprocmask( int, const sigset_t *, sigset_t * );
QBFC_EXTERN int sigsuspend( const sigset_t * );
QBFC_EXTERN int sigtimedwait( const sigset_t *, siginfo_t *,
                              const struct timespec * );
QBFC_EXTERN int sigwait( const sigset_t *, int * );
QBFC_EXTERN int sigwaitinfo( const sigset_t *, siginfo_t * );
QBFC_EXTERN int Qp0sEnableSignals( void );
QBFC_EXTERN int Qp0sDisableSignals( void );


typedef long sig_atomic_t;

void  _C_sig_err( int );
void  _C_sig_dfl( int );
void  _C_sig_ign( int );

int    raise ( int );
void   (*signal ( int, void (*)(int) ))( int );

#ifdef __ASYNC_SIG__
  #pragma map ( signal, "_C_async_signal")
  #pragma map ( raise,  "_C_async_raise")
#endif

/* Language Levels - IBM Extensions only                            */
#if defined (__EXTENDED__) && !defined(__ASYNC_SIG__)

  void _GetExcData ( _INTRPT_Hndlr_Parms_T * );

#endif /* Language Levels - IBM Extensions only                     */


#define SIG_ERR     (&_C_sig_err)              /* error return        */
#define SIG_DFL     (&_C_sig_dfl)              /* default handling    */
#define SIG_IGN     (&_C_sig_ign)              /* ignore signal       */

#pragma datamodel(pop)

#ifdef __cplusplus
 #pragma info(restore)
 }
#else
 #pragma checkout(resume)
#endif

#endif /* #ifndef __signal_h */
